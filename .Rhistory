}
}
# Combine the plots into one
final_plot_UMAP <- subplot(plots_UMAP)
# Display the final plot
print(final_plot_UMAP)
# Perform UMAP and plot the results
# ...
# Step 1: Install and load the required packages
# Step 3: Perform UMAP with different parameter values and store the results
n_neighbors_values <- c(5, 10, 20, 30)
min_dist_values <- c(0.1, 0.2, 0.5, 0.7)
umap_results <- list()
for (n_neighbors in n_neighbors_values) {
for (min_dist in min_dist_values) {
key <- paste0("n_neighbors=", n_neighbors, "_min_dist=", min_dist)
umap_results[[key]] <- umap(reduced_point_cloud, n_neighbors = n_neighbors, min_dist = min_dist)
}
}
# Step 4: Plot the different results using plotly
plots_UMAP <- list()
for (i in 1:length(n_neighbors_values)) {
for (j in 1:length(min_dist_values)) {
key <- paste0("n_neighbors=", n_neighbors_values[i], "_min_dist=", min_dist_values[j])
umap_result <- umap_results[[key]]
plot_UMAP <- plot_ly(x = umap_result$layout[, 1], y = umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 3),
name = key)
plots_UMAP[[key]] <- plot_UMAP
}
}
# Combine the plots into one
final_plot_UMAP <- subplot(plots_UMAP)
# Display the final plot
print(final_plot_UMAP)
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgefÃ¼hrt werden?
warning = FALSE, # -> Warnungen sollten nur am Ende zum Rendern auf FALSE gesetzt werden
message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
# Set up libraries
# ...
#install.packages("plotly")
#install.packages("Rtsne")
#install.packages("umap")
library(tidyverse)
library(plotly)
library(Rtsne)
library(umap)
library(ggplot2)
# Load the csv file and select a subset of the rows
# ...
# Load necessary libraries
# Set the value of n for downsampling
n <- 400
# Read the CSV file
point_cloud <- read_csv("point_cloud.csv")
# Reduce the point cloud by keeping every n-th point
reduced_point_cloud <- point_cloud %>%
slice(seq(1, nrow(point_cloud), n))
# Plot the point cloud in 3D
# ...
# Install and load required packages
library(plotly)
# Create 3D plot
plot_ly(reduced_point_cloud, x = ~x, y = ~y, z = ~z, mode = "markers") %>%
add_markers()
print(plot)
# Replace the 'point_cloud' data with actual data to visualize it
# Perform t-SNE and plot the results
# ...
# Load necessary library
library(Rtsne)
library(plotly)
# Step 2: Prepare your data (replace 'your_data' with your actual data)
# your_data should be a matrix or data frame with numerical values
your_data <- matrix(rnorm(1000), ncol = 10)  # Example data: 1000 points with 10 dimensions
# Step 3: Perform t-SNE with different perplexity values and store the results
perplexity_values <- c(5, 10, 20, 30, 50)
tSNE_results <- list()
for (perplexity in perplexity_values) {
tSNE_results[[as.character(perplexity)]] <- Rtsne(reduced_point_cloud, perplexity = perplexity, dims = 2)
}
# Step 4: Plot the different results using plotly
plots <- list()
for (perplexity in perplexity_values) {
tsne_result <- tSNE_results[[as.character(perplexity)]]
plot <- plot_ly(x = tsne_result$Y[, 1], y = tsne_result$Y[, 2], type = "scatter", mode = "markers",
marker = list(size = 8),
name = paste0("Perplexity ", perplexity))
plots[[as.character(perplexity)]] <- plot
}
# Combine the plots into one
final_plot <- subplot(plots)
# Display the final plot
print(final_plot)
# Perform UMAP and plot the results
# ...
# Step 1: Install and load the required packages
# Step 3: Perform UMAP with different parameter values and store the results
n_neighbors_values <- c(5, 10, 20, 30)
min_dist_values <- c(0.1, 0.2, 0.5, 0.7)
umap_results <- list()
for (n_neighbors in n_neighbors_values) {
for (min_dist in min_dist_values) {
key <- paste0("n_neighbors=", n_neighbors, "_min_dist=", min_dist)
umap_results[[key]] <- umap(reduced_point_cloud, n_neighbors = n_neighbors, min_dist = min_dist)
}
}
# Step 4: Plot the different results using plotly
plots_UMAP <- list()
for (i in 1:length(n_neighbors_values)) {
for (j in 1:length(min_dist_values)) {
key <- paste0("n_neighbors=", n_neighbors_values[i], "_min_dist=", min_dist_values[j])
umap_result <- umap_results[[key]]
plot_UMAP <- plot_ly(x = umap_result$layout[, 1], y = umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 3),
name = key)
plots_UMAP[[key]] <- plot_UMAP
}
}
# Combine the plots into one
final_plot_UMAP <- subplot(plots_UMAP)
# Display the final plot
print(final_plot_UMAP)
# Perform UMAP and plot the results
# ...
# Step 1: Install and load the required packages
# Step 3: Perform UMAP with different parameter values and store the results
n_neighbors_values <- c(5, 10, 20, 30)
min_dist_values <- c(0.1, 0.2, 0.5, 0.7)
umap_results <- list()
for (n_neighbors in n_neighbors_values) {
for (min_dist in min_dist_values) {
key <- paste0("n_neighbors=", n_neighbors, "_min_dist=", min_dist)
umap_results[[key]] <- umap(reduced_point_cloud, n_neighbors = n_neighbors, min_dist = min_dist)
}
}
# Step 4: Plot the different results using plotly
plots_UMAP <- list()
for (i in 1:length(n_neighbors_values)) {
for (j in 1:length(min_dist_values)) {
key <- paste0("n_neighbors=", n_neighbors_values[i], "_min_dist=", min_dist_values[j])
umap_result <- umap_results[[key]]
plot_UMAP <- plot_ly(x = umap_result$layout[, 1], y = umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 3),
name = key)
plots_UMAP[[key]] <- plot_UMAP
}
}
# Combine the plots into one
#final_plot_UMAP <- subplot(plots_UMAP)
# Display the final plot
#final_plot_UMAP
plots_UMAP
# Perform UMAP and plot the results
# ...
# Step 1: Install and load the required packages
# Step 3: Perform UMAP with different parameter values and store the results
n_neighbors_values <- c(5, 10, 20, 30)
min_dist_values <- c(0.1, 0.2, 0.5, 0.7)
umap_results <- list()
for (n_neighbors in n_neighbors_values) {
for (min_dist in min_dist_values) {
key <- paste0("n_neighbors=", n_neighbors, "_min_dist=", min_dist)
umap_results[[key]] <- umap(reduced_point_cloud, n_neighbors = n_neighbors, min_dist = min_dist)
}
}
# Step 4: Plot the different results using plotly
plots_UMAP <- list()
for (i in 1:length(n_neighbors_values)) {
for (j in 1:length(min_dist_values)) {
key <- paste0("n_neighbors=", n_neighbors_values[i], "_min_dist=", min_dist_values[j])
umap_result <- umap_results[[key]]
plot_UMAP <- plot_ly(x = umap_result$layout[, 1], y = umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 3),
name = key)
plots_UMAP[[key]] <- plot_UMAP
}
}
# Combine the plots into one
#final_plot_UMAP <- subplot(plots_UMAP)
# Display the final plot
#final_plot_UMAP
plots_UMAP
plots_UMAP[[key]]
# Perform UMAP and plot the results
# ...
# Step 1: Install and load the required packages
# Step 3: Perform UMAP with different parameter values and store the results
n_neighbors_values <- c(5, 10, 20, 30)
min_dist_values <- c(0.1, 0.2, 0.5, 0.7)
umap_results <- list()
for (n_neighbors in n_neighbors_values) {
for (min_dist in min_dist_values) {
key <- paste0("n_neighbors=", n_neighbors, "_min_dist=", min_dist)
umap_results[[key]] <- umap(reduced_point_cloud, n_neighbors = n_neighbors, min_dist = min_dist)
}
}
# Step 4: Plot the different results using plotly
plots_UMAP <- list()
for (i in 1:length(n_neighbors_values)) {
for (j in 1:length(min_dist_values)) {
key <- paste0("n_neighbors=", n_neighbors_values[i], "_min_dist=", min_dist_values[j])
umap_result <- umap_results[[key]]
plot_UMAP <- plot_ly(x = umap_result$layout[, 1], y = umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 3),
name = key)
plots_UMAP[[key]] <- plot_UMAP
}
}
# Combine the plots into one
#final_plot_UMAP <- subplot(plots_UMAP)
# Display the final plot
#final_plot_UMAP
#plots_UMAP
#plots_UMAP[[key]]
# Arrange the plots into a grid of subplots
num_rows <- length(n_neighbors_values)
num_cols <- length(min_dist_values)
subplot_titles <- c(paste0("n_neighbors =", n_neighbors_values), paste0("min_dist =", min_dist_values))
subplot_grid <- subplot(plots_UMAP, nrows = num_rows, margin = 0.1, titleX = FALSE, titleY = FALSE, shareX = TRUE, shareY = TRUE, subplot_titles = subplot_titles)
# Perform UMAP and plot the results
# ...
# Step 1: Install and load the required packages
# Step 3: Perform UMAP with different parameter values and store the results
n_neighbors_values <- c(5, 10, 20, 30)
min_dist_values <- c(0.1, 0.2, 0.5, 0.7)
umap_results <- list()
for (n_neighbors in n_neighbors_values) {
for (min_dist in min_dist_values) {
key <- paste0("n_neighbors=", n_neighbors, "_min_dist=", min_dist)
umap_results[[key]] <- umap(reduced_point_cloud, n_neighbors = n_neighbors, min_dist = min_dist)
}
}
# Step 4: Plot the different results using plotly
plots_UMAP <- list()
for (i in 1:length(n_neighbors_values)) {
for (j in 1:length(min_dist_values)) {
key <- paste0("n_neighbors=", n_neighbors_values[i], "_min_dist=", min_dist_values[j])
umap_result <- umap_results[[key]]
plot_UMAP <- plot_ly(x = umap_result$layout[, 1], y = umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 3),
name = key)
plots_UMAP[[key]] <- plot_UMAP
}
}
# Combine the plots into one
#final_plot_UMAP <- subplot(plots_UMAP)
# Display the final plot
#final_plot_UMAP
#plots_UMAP
#plots_UMAP[[key]]
# Arrange the plots into a grid of subplots
num_rows <- length(n_neighbors_values)
num_cols <- length(min_dist_values)
subplot_titles <- c(paste0("n_neighbors =", n_neighbors_values), paste0("min_dist =", min_dist_values))
subplot_grid <- subplot(plots_UMAP, nrows = num_rows, margin = 0.1, titleX = FALSE, titleY = FALSE, shareX = TRUE, shareY = TRUE, subplot_titles = subplot_titles)
# Perform UMAP and plot the results
# ...
# Step 1: Install and load the required packages
# Step 3: Perform UMAP with different parameter values and store the results
n_neighbors_values <- c(5, 10, 20, 30)
min_dist_values <- c(0.1, 0.2, 0.5, 0.7)
umap_results <- list()
for (n_neighbors in n_neighbors_values) {
for (min_dist in min_dist_values) {
key <- paste0("n_neighbors=", n_neighbors, "_min_dist=", min_dist)
umap_results[[key]] <- umap(reduced_point_cloud, n_neighbors = n_neighbors, min_dist = min_dist)
}
}
# Step 4: Plot the different results using plotly
plots_UMAP <- list()
for (i in 1:length(n_neighbors_values)) {
for (j in 1:length(min_dist_values)) {
key <- paste0("n_neighbors=", n_neighbors_values[i], "_min_dist=", min_dist_values[j])
umap_result <- umap_results[[key]]
plot_UMAP <- plot_ly(x = umap_result$layout[, 1], y = umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 3),
name = key)
plots_UMAP[[key]] <- plot_UMAP
}
}
# Combine the plots into one
#final_plot_UMAP <- subplot(plots_UMAP)
# Display the final plot
#final_plot_UMAP
#plots_UMAP
#plots_UMAP[[key]]
# Arrange the plots into a grid of subplots
num_rows <- length(n_neighbors_values)
num_cols <- length(min_dist_values)
subplot_titles <- c(paste0("n_neighbors =", n_neighbors_values), paste0("min_dist =", min_dist_values))
subplot_grid <- subplot(plots_UMAP, nrows = num_rows, margin = 0.1, titleX = FALSE, titleY = FALSE, shareX = TRUE, shareY = TRUE, subplot_titles = subplot_titles)
# Perform UMAP and plot the results
# ...
# Step 3: Perform UMAP with different parameter values and store the results
n_neighbors_values <- c(5, 10, 20, 30)
min_dist_values <- c(0.1, 0.2, 0.5, 0.7)
umap_results <- list()
for (n_neighbors in n_neighbors_values) {
for (min_dist in min_dist_values) {
key <- paste0("n_neighbors=", n_neighbors, "_min_dist=", min_dist)
umap_results[[key]] <- umap(your_data, n_neighbors = n_neighbors, min_dist = min_dist)
}
}
# Step 4: Plot the different results using plotly
plots_UMAP <- list()
for (i in 1:length(n_neighbors_values)) {
for (j in 1:length(min_dist_values)) {
key <- paste0("n_neighbors=", n_neighbors_values[i], "_min_dist=", min_dist_values[j])
umap_result <- umap_results[[key]]
plot_UMAP <- plot_ly(x = umap_result$layout[, 1], y = umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 5),
name = key)
plots_UMAP[[key]] <- plot_UMAP
}
}
# Arrange the plots into a grid of subplots
num_rows <- length(n_neighbors_values)
num_cols <- length(min_dist_values)
subplot_titles <- c(paste0("n_neighbors =", n_neighbors_values), paste0("min_dist =", min_dist_values))
subplot_grid <- subplot(plots_UMAP, nrows = num_rows, margin = 0.1, titleX = FALSE, titleY = FALSE, shareX = TRUE, shareY = TRUE, subplot_titles = subplot_titles)
# Perform UMAP and plot the results
# ...
# Step 3: Perform UMAP with different parameter values and store the results
n_neighbors_values <- c(5, 10, 20, 30)
min_dist_values <- c(0.1, 0.2, 0.5, 0.7)
umap_results <- list()
for (n_neighbors in n_neighbors_values) {
for (min_dist in min_dist_values) {
key <- paste0("n_neighbors=", n_neighbors, "_min_dist=", min_dist)
umap_results[[key]] <- umap(your_data, n_neighbors = n_neighbors, min_dist = min_dist)
}
}
# Step 4: Plot the different results using plotly and create a 2D matrix of plot objects
num_rows <- length(n_neighbors_values)
num_cols <- length(min_dist_values)
plots_UMAP <- matrix(list(), nrow = num_rows, ncol = num_cols)
for (i in 1:num_rows) {
for (j in 1:num_cols) {
key <- paste0("n_neighbors=", n_neighbors_values[i], "_min_dist=", min_dist_values[j])
umap_result <- umap_results[[key]]
plot_UMAP <- plot_ly(x = umap_result$layout[, 1], y = umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 5),
name = key)
plots_UMAP[i, j] <- plot_UMAP
}
}
# Perform UMAP and plot the results
# ...
# Step 3: Perform UMAP with different parameter values and store the results
n_neighbors_values <- c(5, 10, 20, 30)
min_dist_values <- c(0.1, 0.2, 0.5, 0.7)
umap_results <- list()
for (n_neighbors in n_neighbors_values) {
for (min_dist in min_dist_values) {
key <- paste0("n_neighbors=", n_neighbors, "_min_dist=", min_dist)
umap_results[[key]] <- umap(your_data, n_neighbors = n_neighbors, min_dist = min_dist)
}
}
# Step 4: Plot the different results using plotly and create a 2D matrix of plot objects
num_rows <- length(n_neighbors_values)
num_cols <- length(min_dist_values)
plots_UMAP <- matrix(list(), nrow = num_rows, ncol = num_cols)
for (i in 1:num_rows) {
for (j in 1:num_cols) {
key <- paste0("n_neighbors=", n_neighbors_values[i], "_min_dist=", min_dist_values[j])
umap_result <- umap_results[[key]]
plot_UMAP <- plot_ly(x = umap_result$layout[, 1], y = umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 5),
name = key)
plots_UMAP[[i, j]] <- plot_UMAP
}
}
# Step 5: Flatten the matrix of plot objects into a 1D list
plots_UMAP_flat <- c(plots_UMAP)
# Step 6: Arrange the plots into a grid of subplots using subplot()
subplot_titles <- c(paste0("n_neighbors =", n_neighbors_values), paste0("min_dist =", min_dist_values))
subplot_grid <- subplot(plots_UMAP_flat, nrows = num_rows, margin = 0.1, titleX = FALSE, titleY = FALSE, shareX = TRUE, shareY = TRUE, subplot_titles = subplot_titles)
# Perform UMAP and plot the results
# ...
# Perform UMAP with different parameter values and store the results
n_neighbors_values <- c(5, 10, 20, 30)
min_dist_values <- c(0.1, 0.2, 0.5, 0.7)
umap_results <- list()
for (n_neighbors in n_neighbors_values) {
for (min_dist in min_dist_values) {
key <- paste0("n_neighbors=", n_neighbors, "_min_dist=", min_dist)
umap_results[[key]] <- umap(reduced_point_cloud, n_neighbors = n_neighbors, min_dist = min_dist)
}
}
# Plot the different results using plotly
plots_UMAP <- list()
for (i in 1:length(n_neighbors_values)) {
for (j in 1:length(min_dist_values)) {
key <- paste0("n_neighbors=", n_neighbors_values[i], "_min_dist=", min_dist_values[j])
umap_result <- umap_results[[key]]
plot_UMAP <- plot_ly(x = umap_result$layout[, 1], y = umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 3),
name = key)
plots_UMAP[[key]] <- plot_UMAP
}
}
# Combine the plots into one
#final_plot_UMAP <- subplot(plots_UMAP)
# Display the final plot
final_plot_UMAP
# Perform UMAP and plot the results
# ...
# Perform UMAP with different parameter values and store the results
n_neighbors_values <- c(5, 10, 20, 30)
min_dist_values <- c(0.1, 0.2, 0.5, 0.7)
umap_results <- list()
for (n_neighbors in n_neighbors_values) {
for (min_dist in min_dist_values) {
key <- paste0("n_neighbors=", n_neighbors, "_min_dist=", min_dist)
umap_results[[key]] <- umap(reduced_point_cloud, n_neighbors = n_neighbors, min_dist = min_dist)
}
}
# Plot the different results using plotly
plots_UMAP <- list()
for (i in 1:length(n_neighbors_values)) {
for (j in 1:length(min_dist_values)) {
key <- paste0("n_neighbors=", n_neighbors_values[i], "_min_dist=", min_dist_values[j])
umap_result <- umap_results[[key]]
plot_UMAP <- plot_ly(x = umap_result$layout[, 1], y = umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 3),
name = key)
plots_UMAP[[key]] <- plot_UMAP
}
}
# Combine the plots into one
final_plot_UMAP <- subplot(plots_UMAP)
# Display the final plot
final_plot_UMAP
plots_UMAP
# Perform UMAP and plot the results
# ...
# Perform UMAP with different parameter values and store the results
n_neighbors_values <- c(5, 10, 20, 30)
min_dist_values <- c(0.1, 0.2, 0.5, 0.7)
umap_results <- list()
for (n_neighbors in n_neighbors_values) {
for (min_dist in min_dist_values) {
key <- paste0("n_neighbors=", n_neighbors, "_min_dist=", min_dist)
umap_results[[key]] <- umap(reduced_point_cloud, n_neighbors = n_neighbors, min_dist = min_dist)
}
}
# Plot the different results using plotly
plots_UMAP <- list()
for (i in 1:length(n_neighbors_values)) {
for (j in 1:length(min_dist_values)) {
key <- paste0("n_neighbors=", n_neighbors_values[i], "_min_dist=", min_dist_values[j])
umap_result <- umap_results[[key]]
plot_UMAP <- plot_ly(x = umap_result$layout[, 1], y = umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 3),
name = key)
plots_UMAP[[key]] <- plot_UMAP
}
}
# Combine the plots into one
final_plot_UMAP <- subplot(plots_UMAP)
# Display the final plot
final_plot_UMAP
# Step : Plot the specific result for 'n_neighbors = 30' and 'min_dist = 0.7' using plotly
specific_key <- "n_neighbors=30_min_dist=0.7"
specific_umap_result <- umap_results[[specific_key]]
specific_plot_UMAP <- plot_ly(x = specific_umap_result$layout[, 1], y = specific_umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 5),
name = specific_key)
# Customize the layout of the specific plot (optional)
specific_plot_UMAP <- layout(specific_plot_UMAP, title = "UMAP Plot for n_neighbors = 30, min_dist = 0.7")
# Display the specific plot
print(specific_plot_UMAP)
# Perform UMAP and plot the results
# ...
# Perform UMAP with different parameter values and store the results
n_neighbors_values <- c(5, 10, 20, 30)
min_dist_values <- c(0.1, 0.2, 0.5, 0.7)
umap_results <- list()
for (n_neighbors in n_neighbors_values) {
for (min_dist in min_dist_values) {
key <- paste0("n_neighbors=", n_neighbors, "_min_dist=", min_dist)
umap_results[[key]] <- umap(reduced_point_cloud, n_neighbors = n_neighbors, min_dist = min_dist)
}
}
# Plot the different results using plotly
plots_UMAP <- list()
for (i in 1:length(n_neighbors_values)) {
for (j in 1:length(min_dist_values)) {
key <- paste0("n_neighbors=", n_neighbors_values[i], "_min_dist=", min_dist_values[j])
umap_result <- umap_results[[key]]
plot_UMAP <- plot_ly(x = umap_result$layout[, 1], y = umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 3),
name = key)
plots_UMAP[[key]] <- plot_UMAP
}
}
# Combine the plots into one
final_plot_UMAP <- subplot(plots_UMAP)
# Display the final plot
final_plot_UMAP
# Step : Plot the specific result for 'n_neighbors = 30' and 'min_dist = 0.7' using plotly
specific_key <- "n_neighbors=30_min_dist=0.7"
specific_umap_result <- umap_results[[specific_key]]
specific_plot_UMAP <- plot_ly(x = specific_umap_result$layout[, 1], y = specific_umap_result$layout[, 2], type = "scatter", mode = "markers",
marker = list(size = 5),
name = specific_key)
# Customize the layout of the specific plot (optional)
specific_plot_UMAP <- layout(specific_plot_UMAP, title = "UMAP Plot for n_neighbors = 30, min_dist = 0.7")
# Display the specific plot
specific_plot_UMAP
